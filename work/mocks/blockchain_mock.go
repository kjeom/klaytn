// Code generated by MockGen. DO NOT EDIT.
// Source: work/work.go

// Package mock_work is a generated GoMock package.
package mocks

import (
	io "io"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	accounts "github.com/klaytn/klaytn/accounts"
	blockchain "github.com/klaytn/klaytn/blockchain"
	state "github.com/klaytn/klaytn/blockchain/state"
	types "github.com/klaytn/klaytn/blockchain/types"
	vm "github.com/klaytn/klaytn/blockchain/vm"
	common "github.com/klaytn/klaytn/common"
	consensus "github.com/klaytn/klaytn/consensus"
	event "github.com/klaytn/klaytn/event"
	params "github.com/klaytn/klaytn/params"
	rlp "github.com/klaytn/klaytn/rlp"
	database "github.com/klaytn/klaytn/storage/database"
	work "github.com/klaytn/klaytn/work"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AccountManager mocks base method.
func (m *MockBackend) AccountManager() accounts.AccountManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountManager")
	ret0, _ := ret[0].(accounts.AccountManager)
	return ret0
}

// AccountManager indicates an expected call of AccountManager.
func (mr *MockBackendMockRecorder) AccountManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountManager", reflect.TypeOf((*MockBackend)(nil).AccountManager))
}

// BlockChain mocks base method.
func (m *MockBackend) BlockChain() work.BlockChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockChain")
	ret0, _ := ret[0].(work.BlockChain)
	return ret0
}

// BlockChain indicates an expected call of BlockChain.
func (mr *MockBackendMockRecorder) BlockChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockChain", reflect.TypeOf((*MockBackend)(nil).BlockChain))
}

// ChainDB mocks base method.
func (m *MockBackend) ChainDB() database.DBManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainDB")
	ret0, _ := ret[0].(database.DBManager)
	return ret0
}

// ChainDB indicates an expected call of ChainDB.
func (mr *MockBackendMockRecorder) ChainDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainDB", reflect.TypeOf((*MockBackend)(nil).ChainDB))
}

// ReBroadcastTxs mocks base method.
func (m *MockBackend) ReBroadcastTxs(transactions types.Transactions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReBroadcastTxs", transactions)
}

// ReBroadcastTxs indicates an expected call of ReBroadcastTxs.
func (mr *MockBackendMockRecorder) ReBroadcastTxs(transactions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReBroadcastTxs", reflect.TypeOf((*MockBackend)(nil).ReBroadcastTxs), transactions)
}

// TxPool mocks base method.
func (m *MockBackend) TxPool() work.TxPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPool")
	ret0, _ := ret[0].(work.TxPool)
	return ret0
}

// TxPool indicates an expected call of TxPool.
func (mr *MockBackendMockRecorder) TxPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPool", reflect.TypeOf((*MockBackend)(nil).TxPool))
}

// MockBlockChain is a mock of BlockChain interface.
type MockBlockChain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainMockRecorder
}

// MockBlockChainMockRecorder is the mock recorder for MockBlockChain.
type MockBlockChainMockRecorder struct {
	mock *MockBlockChain
}

// NewMockBlockChain creates a new mock instance.
func NewMockBlockChain(ctrl *gomock.Controller) *MockBlockChain {
	mock := &MockBlockChain{ctrl: ctrl}
	mock.recorder = &MockBlockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChain) EXPECT() *MockBlockChainMockRecorder {
	return m.recorder
}

// ApplyTransaction mocks base method.
func (m *MockBlockChain) ApplyTransaction(config *params.ChainConfig, author *common.Address, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *uint64, cfg *vm.Config) (*types.Receipt, uint64, *vm.InternalTxTrace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTransaction", config, author, statedb, header, tx, usedGas, cfg)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(*vm.InternalTxTrace)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ApplyTransaction indicates an expected call of ApplyTransaction.
func (mr *MockBlockChainMockRecorder) ApplyTransaction(config, author, statedb, header, tx, usedGas, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTransaction", reflect.TypeOf((*MockBlockChain)(nil).ApplyTransaction), config, author, statedb, header, tx, usedGas, cfg)
}

// BadBlocks mocks base method.
func (m *MockBlockChain) BadBlocks() ([]blockchain.BadBlockArgs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BadBlocks")
	ret0, _ := ret[0].([]blockchain.BadBlockArgs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BadBlocks indicates an expected call of BadBlocks.
func (mr *MockBlockChainMockRecorder) BadBlocks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BadBlocks", reflect.TypeOf((*MockBlockChain)(nil).BadBlocks))
}

// BlockSubscriptionLoop mocks base method.
func (m *MockBlockChain) BlockSubscriptionLoop(pool *blockchain.TxPool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlockSubscriptionLoop", pool)
}

// BlockSubscriptionLoop indicates an expected call of BlockSubscriptionLoop.
func (mr *MockBlockChainMockRecorder) BlockSubscriptionLoop(pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockSubscriptionLoop", reflect.TypeOf((*MockBlockChain)(nil).BlockSubscriptionLoop), pool)
}

// CloseBlockSubscriptionLoop mocks base method.
func (m *MockBlockChain) CloseBlockSubscriptionLoop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseBlockSubscriptionLoop")
}

// CloseBlockSubscriptionLoop indicates an expected call of CloseBlockSubscriptionLoop.
func (mr *MockBlockChainMockRecorder) CloseBlockSubscriptionLoop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseBlockSubscriptionLoop", reflect.TypeOf((*MockBlockChain)(nil).CloseBlockSubscriptionLoop))
}

// Config mocks base method.
func (m *MockBlockChain) Config() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockBlockChainMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockBlockChain)(nil).Config))
}

// CurrentBlock mocks base method.
func (m *MockBlockChain) CurrentBlock() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock.
func (mr *MockBlockChainMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockBlockChain)(nil).CurrentBlock))
}

// CurrentFastBlock mocks base method.
func (m *MockBlockChain) CurrentFastBlock() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentFastBlock")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// CurrentFastBlock indicates an expected call of CurrentFastBlock.
func (mr *MockBlockChainMockRecorder) CurrentFastBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentFastBlock", reflect.TypeOf((*MockBlockChain)(nil).CurrentFastBlock))
}

// CurrentHeader mocks base method.
func (m *MockBlockChain) CurrentHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader.
func (mr *MockBlockChainMockRecorder) CurrentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockBlockChain)(nil).CurrentHeader))
}

// Engine mocks base method.
func (m *MockBlockChain) Engine() consensus.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(consensus.Engine)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockBlockChainMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockBlockChain)(nil).Engine))
}

// Export mocks base method.
func (m *MockBlockChain) Export(w io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Export indicates an expected call of Export.
func (mr *MockBlockChainMockRecorder) Export(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockBlockChain)(nil).Export), w)
}

// FastSyncCommitHead mocks base method.
func (m *MockBlockChain) FastSyncCommitHead(hash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FastSyncCommitHead", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// FastSyncCommitHead indicates an expected call of FastSyncCommitHead.
func (mr *MockBlockChainMockRecorder) FastSyncCommitHead(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastSyncCommitHead", reflect.TypeOf((*MockBlockChain)(nil).FastSyncCommitHead), hash)
}

// Genesis mocks base method.
func (m *MockBlockChain) Genesis() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// Genesis indicates an expected call of Genesis.
func (mr *MockBlockChainMockRecorder) Genesis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockBlockChain)(nil).Genesis))
}

// GetBlock mocks base method.
func (m *MockBlockChain) GetBlock(hash common.Hash, number uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, number)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockChainMockRecorder) GetBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockChain)(nil).GetBlock), hash, number)
}

// GetBlockByHash mocks base method.
func (m *MockBlockChain) GetBlockByHash(hash common.Hash) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockChainMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockChain)(nil).GetBlockByHash), hash)
}

// GetBlockByNumber mocks base method.
func (m *MockBlockChain) GetBlockByNumber(number uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", number)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockBlockChainMockRecorder) GetBlockByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockChain)(nil).GetBlockByNumber), number)
}

// GetBlockHashesFromHash mocks base method.
func (m *MockBlockChain) GetBlockHashesFromHash(hash common.Hash, max uint64) []common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHashesFromHash", hash, max)
	ret0, _ := ret[0].([]common.Hash)
	return ret0
}

// GetBlockHashesFromHash indicates an expected call of GetBlockHashesFromHash.
func (mr *MockBlockChainMockRecorder) GetBlockHashesFromHash(hash, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashesFromHash", reflect.TypeOf((*MockBlockChain)(nil).GetBlockHashesFromHash), hash, max)
}

// GetBlockReceiptsInCache mocks base method.
func (m *MockBlockChain) GetBlockReceiptsInCache(blockHash common.Hash) types.Receipts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockReceiptsInCache", blockHash)
	ret0, _ := ret[0].(types.Receipts)
	return ret0
}

// GetBlockReceiptsInCache indicates an expected call of GetBlockReceiptsInCache.
func (mr *MockBlockChainMockRecorder) GetBlockReceiptsInCache(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockReceiptsInCache", reflect.TypeOf((*MockBlockChain)(nil).GetBlockReceiptsInCache), blockHash)
}

// GetBodyRLP mocks base method.
func (m *MockBlockChain) GetBodyRLP(hash common.Hash) rlp.RawValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBodyRLP", hash)
	ret0, _ := ret[0].(rlp.RawValue)
	return ret0
}

// GetBodyRLP indicates an expected call of GetBodyRLP.
func (mr *MockBlockChainMockRecorder) GetBodyRLP(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBodyRLP", reflect.TypeOf((*MockBlockChain)(nil).GetBodyRLP), hash)
}

// GetContractStorageRoot mocks base method.
func (m *MockBlockChain) GetContractStorageRoot(block *types.Block, db state.Database, contractAddr common.Address) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStorageRoot", block, db, contractAddr)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStorageRoot indicates an expected call of GetContractStorageRoot.
func (mr *MockBlockChainMockRecorder) GetContractStorageRoot(block, db, contractAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStorageRoot", reflect.TypeOf((*MockBlockChain)(nil).GetContractStorageRoot), block, db, contractAddr)
}

// GetHeader mocks base method.
func (m *MockBlockChain) GetHeader(hash common.Hash, number uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash, number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockBlockChainMockRecorder) GetHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockBlockChain)(nil).GetHeader), hash, number)
}

// GetHeaderByHash mocks base method.
func (m *MockBlockChain) GetHeaderByHash(hash common.Hash) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash.
func (mr *MockBlockChainMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockBlockChain)(nil).GetHeaderByHash), hash)
}

// GetHeaderByNumber mocks base method.
func (m *MockBlockChain) GetHeaderByNumber(number uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber.
func (mr *MockBlockChainMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockBlockChain)(nil).GetHeaderByNumber), number)
}

// GetLogsByHash mocks base method.
func (m *MockBlockChain) GetLogsByHash(hash common.Hash) [][]*types.Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogsByHash", hash)
	ret0, _ := ret[0].([][]*types.Log)
	return ret0
}

// GetLogsByHash indicates an expected call of GetLogsByHash.
func (mr *MockBlockChainMockRecorder) GetLogsByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogsByHash", reflect.TypeOf((*MockBlockChain)(nil).GetLogsByHash), hash)
}

// GetReceiptsByBlockHash mocks base method.
func (m *MockBlockChain) GetReceiptsByBlockHash(blockHash common.Hash) types.Receipts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptsByBlockHash", blockHash)
	ret0, _ := ret[0].(types.Receipts)
	return ret0
}

// GetReceiptsByBlockHash indicates an expected call of GetReceiptsByBlockHash.
func (mr *MockBlockChainMockRecorder) GetReceiptsByBlockHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptsByBlockHash", reflect.TypeOf((*MockBlockChain)(nil).GetReceiptsByBlockHash), blockHash)
}

// GetTd mocks base method.
func (m *MockBlockChain) GetTd(hash common.Hash, number uint64) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTd", hash, number)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTd indicates an expected call of GetTd.
func (mr *MockBlockChainMockRecorder) GetTd(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTd", reflect.TypeOf((*MockBlockChain)(nil).GetTd), hash, number)
}

// GetTdByHash mocks base method.
func (m *MockBlockChain) GetTdByHash(hash common.Hash) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTdByHash", hash)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTdByHash indicates an expected call of GetTdByHash.
func (mr *MockBlockChainMockRecorder) GetTdByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTdByHash", reflect.TypeOf((*MockBlockChain)(nil).GetTdByHash), hash)
}

// GetTxAndLookupInfo mocks base method.
func (m *MockBlockChain) GetTxAndLookupInfo(txHash common.Hash) (*types.Transaction, common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxAndLookupInfo", txHash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// GetTxAndLookupInfo indicates an expected call of GetTxAndLookupInfo.
func (mr *MockBlockChainMockRecorder) GetTxAndLookupInfo(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxAndLookupInfo", reflect.TypeOf((*MockBlockChain)(nil).GetTxAndLookupInfo), txHash)
}

// GetTxAndLookupInfoInCache mocks base method.
func (m *MockBlockChain) GetTxAndLookupInfoInCache(hash common.Hash) (*types.Transaction, common.Hash, uint64, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxAndLookupInfoInCache", hash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	return ret0, ret1, ret2, ret3
}

// GetTxAndLookupInfoInCache indicates an expected call of GetTxAndLookupInfoInCache.
func (mr *MockBlockChainMockRecorder) GetTxAndLookupInfoInCache(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxAndLookupInfoInCache", reflect.TypeOf((*MockBlockChain)(nil).GetTxAndLookupInfoInCache), hash)
}

// GetTxLookupInfoAndReceipt mocks base method.
func (m *MockBlockChain) GetTxLookupInfoAndReceipt(txHash common.Hash) (*types.Transaction, common.Hash, uint64, uint64, *types.Receipt) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxLookupInfoAndReceipt", txHash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(*types.Receipt)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTxLookupInfoAndReceipt indicates an expected call of GetTxLookupInfoAndReceipt.
func (mr *MockBlockChainMockRecorder) GetTxLookupInfoAndReceipt(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxLookupInfoAndReceipt", reflect.TypeOf((*MockBlockChain)(nil).GetTxLookupInfoAndReceipt), txHash)
}

// GetTxLookupInfoAndReceiptInCache mocks base method.
func (m *MockBlockChain) GetTxLookupInfoAndReceiptInCache(txHash common.Hash) (*types.Transaction, common.Hash, uint64, uint64, *types.Receipt) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxLookupInfoAndReceiptInCache", txHash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(common.Hash)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(*types.Receipt)
	return ret0, ret1, ret2, ret3, ret4
}

// GetTxLookupInfoAndReceiptInCache indicates an expected call of GetTxLookupInfoAndReceiptInCache.
func (mr *MockBlockChainMockRecorder) GetTxLookupInfoAndReceiptInCache(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxLookupInfoAndReceiptInCache", reflect.TypeOf((*MockBlockChain)(nil).GetTxLookupInfoAndReceiptInCache), txHash)
}

// HasBadBlock mocks base method.
func (m *MockBlockChain) HasBadBlock(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBadBlock", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBadBlock indicates an expected call of HasBadBlock.
func (mr *MockBlockChainMockRecorder) HasBadBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBadBlock", reflect.TypeOf((*MockBlockChain)(nil).HasBadBlock), hash)
}

// HasBlock mocks base method.
func (m *MockBlockChain) HasBlock(hash common.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBlock", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBlock indicates an expected call of HasBlock.
func (mr *MockBlockChainMockRecorder) HasBlock(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBlock", reflect.TypeOf((*MockBlockChain)(nil).HasBlock), hash, number)
}

// HasHeader mocks base method.
func (m *MockBlockChain) HasHeader(hash common.Hash, number uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", hash, number)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader.
func (mr *MockBlockChainMockRecorder) HasHeader(hash, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockBlockChain)(nil).HasHeader), hash, number)
}

// InsertChain mocks base method.
func (m *MockBlockChain) InsertChain(chain types.Blocks) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertChain", chain)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertChain indicates an expected call of InsertChain.
func (mr *MockBlockChainMockRecorder) InsertChain(chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertChain", reflect.TypeOf((*MockBlockChain)(nil).InsertChain), chain)
}

// InsertHeaderChain mocks base method.
func (m *MockBlockChain) InsertHeaderChain(chain []*types.Header, checkFreq int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHeaderChain", chain, checkFreq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHeaderChain indicates an expected call of InsertHeaderChain.
func (mr *MockBlockChainMockRecorder) InsertHeaderChain(chain, checkFreq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHeaderChain", reflect.TypeOf((*MockBlockChain)(nil).InsertHeaderChain), chain, checkFreq)
}

// InsertReceiptChain mocks base method.
func (m *MockBlockChain) InsertReceiptChain(blockChain types.Blocks, receiptChain []types.Receipts) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReceiptChain", blockChain, receiptChain)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertReceiptChain indicates an expected call of InsertReceiptChain.
func (mr *MockBlockChainMockRecorder) InsertReceiptChain(blockChain, receiptChain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReceiptChain", reflect.TypeOf((*MockBlockChain)(nil).InsertReceiptChain), blockChain, receiptChain)
}

// IsParallelDBWrite mocks base method.
func (m *MockBlockChain) IsParallelDBWrite() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsParallelDBWrite")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsParallelDBWrite indicates an expected call of IsParallelDBWrite.
func (mr *MockBlockChainMockRecorder) IsParallelDBWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsParallelDBWrite", reflect.TypeOf((*MockBlockChain)(nil).IsParallelDBWrite))
}

// IsSenderTxHashIndexingEnabled mocks base method.
func (m *MockBlockChain) IsSenderTxHashIndexingEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSenderTxHashIndexingEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSenderTxHashIndexingEnabled indicates an expected call of IsSenderTxHashIndexingEnabled.
func (mr *MockBlockChainMockRecorder) IsSenderTxHashIndexingEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSenderTxHashIndexingEnabled", reflect.TypeOf((*MockBlockChain)(nil).IsSenderTxHashIndexingEnabled))
}

// PostChainEvents mocks base method.
func (m *MockBlockChain) PostChainEvents(events []interface{}, logs []*types.Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostChainEvents", events, logs)
}

// PostChainEvents indicates an expected call of PostChainEvents.
func (mr *MockBlockChainMockRecorder) PostChainEvents(events, logs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostChainEvents", reflect.TypeOf((*MockBlockChain)(nil).PostChainEvents), events, logs)
}

// PrepareStateMigration mocks base method.
func (m *MockBlockChain) PrepareStateMigration() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareStateMigration")
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareStateMigration indicates an expected call of PrepareStateMigration.
func (mr *MockBlockChainMockRecorder) PrepareStateMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStateMigration", reflect.TypeOf((*MockBlockChain)(nil).PrepareStateMigration))
}

// Processor mocks base method.
func (m *MockBlockChain) Processor() blockchain.Processor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(blockchain.Processor)
	return ret0
}

// Processor indicates an expected call of Processor.
func (mr *MockBlockChainMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockBlockChain)(nil).Processor))
}

// ResetWithGenesisBlock mocks base method.
func (m *MockBlockChain) ResetWithGenesisBlock(gb *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetWithGenesisBlock", gb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetWithGenesisBlock indicates an expected call of ResetWithGenesisBlock.
func (mr *MockBlockChainMockRecorder) ResetWithGenesisBlock(gb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWithGenesisBlock", reflect.TypeOf((*MockBlockChain)(nil).ResetWithGenesisBlock), gb)
}

// Rollback mocks base method.
func (m *MockBlockChain) Rollback(chain []common.Hash) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", chain)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBlockChainMockRecorder) Rollback(chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBlockChain)(nil).Rollback), chain)
}

// SaveTrieNodeCacheToDisk mocks base method.
func (m *MockBlockChain) SaveTrieNodeCacheToDisk() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrieNodeCacheToDisk")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrieNodeCacheToDisk indicates an expected call of SaveTrieNodeCacheToDisk.
func (mr *MockBlockChainMockRecorder) SaveTrieNodeCacheToDisk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrieNodeCacheToDisk", reflect.TypeOf((*MockBlockChain)(nil).SaveTrieNodeCacheToDisk))
}

// SetBaseFeeDenominator mocks base method.
func (m *MockBlockChain) SetBaseFeeDenominator(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseFeeDenominator", val)
}

// SetBaseFeeDenominator indicates an expected call of SetBaseFeeDenominator.
func (mr *MockBlockChainMockRecorder) SetBaseFeeDenominator(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseFeeDenominator", reflect.TypeOf((*MockBlockChain)(nil).SetBaseFeeDenominator), val)
}

// SetMaxBlockGasUsedForBaseFee mocks base method.
func (m *MockBlockChain) SetMaxBlockGasUsedForBaseFee(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxBlockGasUsedForBaseFee", val)
}

// SetMaxBlockGasUsedForBaseFee indicates an expected call of SetMaxBlockGasUsedForBaseFee.
func (mr *MockBlockChainMockRecorder) SetMaxBlockGasUsedForBaseFee(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxBlockGasUsedForBaseFee", reflect.TypeOf((*MockBlockChain)(nil).SetMaxBlockGasUsedForBaseFee), val)
}

// SetGasTarget mocks base method.
func (m *MockBlockChain) SetGasTarget(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGasTarget", val)
}

// SetGasTarget indicates an expected call of SetGasTarget.
func (mr *MockBlockChainMockRecorder) SetGasTarget(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGasTarget", reflect.TypeOf((*MockBlockChain)(nil).SetGasTarget), val)
}

// SetHead mocks base method.
func (m *MockBlockChain) SetHead(head uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHead", head)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHead indicates an expected call of SetHead.
func (mr *MockBlockChainMockRecorder) SetHead(head interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHead", reflect.TypeOf((*MockBlockChain)(nil).SetHead), head)
}

// SetLowerBoundBaseFee mocks base method.
func (m *MockBlockChain) SetLowerBoundBaseFee(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLowerBoundBaseFee", val)
}

// SetLowerBoundBaseFee indicates an expected call of SetLowerBoundBaseFee.
func (mr *MockBlockChainMockRecorder) SetLowerBoundBaseFee(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLowerBoundBaseFee", reflect.TypeOf((*MockBlockChain)(nil).SetLowerBoundBaseFee), val)
}

// SetProposerPolicy mocks base method.
func (m *MockBlockChain) SetProposerPolicy(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProposerPolicy", val)
}

// SetProposerPolicy indicates an expected call of SetProposerPolicy.
func (mr *MockBlockChainMockRecorder) SetProposerPolicy(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProposerPolicy", reflect.TypeOf((*MockBlockChain)(nil).SetProposerPolicy), val)
}

// SetUpperBoundBaseFee mocks base method.
func (m *MockBlockChain) SetUpperBoundBaseFee(val uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpperBoundBaseFee", val)
}

// SetUpperBoundBaseFee indicates an expected call of SetUpperBoundBaseFee.
func (mr *MockBlockChainMockRecorder) SetUpperBoundBaseFee(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpperBoundBaseFee", reflect.TypeOf((*MockBlockChain)(nil).SetUpperBoundBaseFee), val)
}

// SetUseGiniCoeff mocks base method.
func (m *MockBlockChain) SetUseGiniCoeff(val bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUseGiniCoeff", val)
}

// SetUseGiniCoeff indicates an expected call of SetUseGiniCoeff.
func (mr *MockBlockChainMockRecorder) SetUseGiniCoeff(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUseGiniCoeff", reflect.TypeOf((*MockBlockChain)(nil).SetUseGiniCoeff), val)
}

// StartCollectingTrieStats mocks base method.
func (m *MockBlockChain) StartCollectingTrieStats(contractAddr common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCollectingTrieStats", contractAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCollectingTrieStats indicates an expected call of StartCollectingTrieStats.
func (mr *MockBlockChainMockRecorder) StartCollectingTrieStats(contractAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCollectingTrieStats", reflect.TypeOf((*MockBlockChain)(nil).StartCollectingTrieStats), contractAddr)
}

// StartContractWarmUp mocks base method.
func (m *MockBlockChain) StartContractWarmUp(contractAddr common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContractWarmUp", contractAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContractWarmUp indicates an expected call of StartContractWarmUp.
func (mr *MockBlockChainMockRecorder) StartContractWarmUp(contractAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContractWarmUp", reflect.TypeOf((*MockBlockChain)(nil).StartContractWarmUp), contractAddr)
}

// StartStateMigration mocks base method.
func (m *MockBlockChain) StartStateMigration(arg0 uint64, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartStateMigration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartStateMigration indicates an expected call of StartStateMigration.
func (mr *MockBlockChainMockRecorder) StartStateMigration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStateMigration", reflect.TypeOf((*MockBlockChain)(nil).StartStateMigration), arg0, arg1)
}

// StartWarmUp mocks base method.
func (m *MockBlockChain) StartWarmUp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWarmUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWarmUp indicates an expected call of StartWarmUp.
func (mr *MockBlockChainMockRecorder) StartWarmUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWarmUp", reflect.TypeOf((*MockBlockChain)(nil).StartWarmUp))
}

// State mocks base method.
func (m *MockBlockChain) State() (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockBlockChainMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockBlockChain)(nil).State))
}

// StateAt mocks base method.
func (m *MockBlockChain) StateAt(root common.Hash) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAt", root)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAt indicates an expected call of StateAt.
func (mr *MockBlockChainMockRecorder) StateAt(root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAt", reflect.TypeOf((*MockBlockChain)(nil).StateAt), root)
}

// StateAtWithGCLock mocks base method.
func (m *MockBlockChain) StateAtWithGCLock(root common.Hash) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtWithGCLock", root)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAtWithGCLock indicates an expected call of StateAtWithGCLock.
func (mr *MockBlockChainMockRecorder) StateAtWithGCLock(root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtWithGCLock", reflect.TypeOf((*MockBlockChain)(nil).StateAtWithGCLock), root)
}

// StateAtWithPersistent mocks base method.
func (m *MockBlockChain) StateAtWithPersistent(root common.Hash) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAtWithPersistent", root)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAtWithPersistent indicates an expected call of StateAtWithPersistent.
func (mr *MockBlockChainMockRecorder) StateAtWithPersistent(root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAtWithPersistent", reflect.TypeOf((*MockBlockChain)(nil).StateAtWithPersistent), root)
}

// StateCache mocks base method.
func (m *MockBlockChain) StateCache() state.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateCache")
	ret0, _ := ret[0].(state.Database)
	return ret0
}

// StateCache indicates an expected call of StateCache.
func (mr *MockBlockChainMockRecorder) StateCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateCache", reflect.TypeOf((*MockBlockChain)(nil).StateCache))
}

// StateMigrationStatus mocks base method.
func (m *MockBlockChain) StateMigrationStatus() (bool, uint64, int, int, int, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMigrationStatus")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(int)
	ret5, _ := ret[5].(float64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// StateMigrationStatus indicates an expected call of StateMigrationStatus.
func (mr *MockBlockChainMockRecorder) StateMigrationStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMigrationStatus", reflect.TypeOf((*MockBlockChain)(nil).StateMigrationStatus))
}

// Stop mocks base method.
func (m *MockBlockChain) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBlockChainMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBlockChain)(nil).Stop))
}

// StopStateMigration mocks base method.
func (m *MockBlockChain) StopStateMigration() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStateMigration")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopStateMigration indicates an expected call of StopStateMigration.
func (mr *MockBlockChainMockRecorder) StopStateMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStateMigration", reflect.TypeOf((*MockBlockChain)(nil).StopStateMigration))
}

// StopWarmUp mocks base method.
func (m *MockBlockChain) StopWarmUp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWarmUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWarmUp indicates an expected call of StopWarmUp.
func (mr *MockBlockChainMockRecorder) StopWarmUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWarmUp", reflect.TypeOf((*MockBlockChain)(nil).StopWarmUp))
}

// SubscribeChainEvent mocks base method.
func (m *MockBlockChain) SubscribeChainEvent(ch chan<- blockchain.ChainEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainEvent indicates an expected call of SubscribeChainEvent.
func (mr *MockBlockChainMockRecorder) SubscribeChainEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainEvent", reflect.TypeOf((*MockBlockChain)(nil).SubscribeChainEvent), ch)
}

// SubscribeChainHeadEvent mocks base method.
func (m *MockBlockChain) SubscribeChainHeadEvent(ch chan<- blockchain.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent.
func (mr *MockBlockChainMockRecorder) SubscribeChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockBlockChain)(nil).SubscribeChainHeadEvent), ch)
}

// SubscribeChainSideEvent mocks base method.
func (m *MockBlockChain) SubscribeChainSideEvent(ch chan<- blockchain.ChainSideEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainSideEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainSideEvent indicates an expected call of SubscribeChainSideEvent.
func (mr *MockBlockChainMockRecorder) SubscribeChainSideEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainSideEvent", reflect.TypeOf((*MockBlockChain)(nil).SubscribeChainSideEvent), ch)
}

// SubscribeLogsEvent mocks base method.
func (m *MockBlockChain) SubscribeLogsEvent(ch chan<- []*types.Log) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLogsEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeLogsEvent indicates an expected call of SubscribeLogsEvent.
func (mr *MockBlockChainMockRecorder) SubscribeLogsEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLogsEvent", reflect.TypeOf((*MockBlockChain)(nil).SubscribeLogsEvent), ch)
}

// SubscribeRemovedLogsEvent mocks base method.
func (m *MockBlockChain) SubscribeRemovedLogsEvent(ch chan<- blockchain.RemovedLogsEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeRemovedLogsEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeRemovedLogsEvent indicates an expected call of SubscribeRemovedLogsEvent.
func (mr *MockBlockChainMockRecorder) SubscribeRemovedLogsEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeRemovedLogsEvent", reflect.TypeOf((*MockBlockChain)(nil).SubscribeRemovedLogsEvent), ch)
}

// TrieNode mocks base method.
func (m *MockBlockChain) TrieNode(hash common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrieNode", hash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrieNode indicates an expected call of TrieNode.
func (mr *MockBlockChainMockRecorder) TrieNode(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrieNode", reflect.TypeOf((*MockBlockChain)(nil).TrieNode), hash)
}

// Validator mocks base method.
func (m *MockBlockChain) Validator() blockchain.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validator")
	ret0, _ := ret[0].(blockchain.Validator)
	return ret0
}

// Validator indicates an expected call of Validator.
func (mr *MockBlockChainMockRecorder) Validator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validator", reflect.TypeOf((*MockBlockChain)(nil).Validator))
}

// WriteBlockWithState mocks base method.
func (m *MockBlockChain) WriteBlockWithState(block *types.Block, receipts []*types.Receipt, stateDB *state.StateDB) (blockchain.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteBlockWithState", block, receipts, stateDB)
	ret0, _ := ret[0].(blockchain.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteBlockWithState indicates an expected call of WriteBlockWithState.
func (mr *MockBlockChainMockRecorder) WriteBlockWithState(block, receipts, stateDB interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteBlockWithState", reflect.TypeOf((*MockBlockChain)(nil).WriteBlockWithState), block, receipts, stateDB)
}
